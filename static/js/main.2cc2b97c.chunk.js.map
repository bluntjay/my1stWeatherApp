{"version":3,"sources":["header/component.jsx","initial-message/component.jsx","search-input/component.jsx","weather-result/component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","InitialMessage","SearchInput","_ref","setWeatherAttributes","setIsLoading","_React$useState","React","useState","_React$useState2","Object","slicedToArray","city","setCity","getWeather","_ref2","asyncToGenerator","_regeneratorRuntime","mark","_callee","APIcall","response","weatherResponse","wrap","_context","prev","next","fetch","sent","json","cod","error","abrupt","temp","main","max","temp_max","min","temp_min","name","lat","coord","lon","windSpeed","wind","speed","windDir","deg","country","sys","humidity","weather","description","icon","stop","apply","this","arguments","onSubmit","event","preventDefault","InputGroup","Form","Control","type","onChange","e","target","value","length","placeholder","Button","variant","Weather","weatherAttributes","isLoading","isEmpty","keys","Fragment","parseFloat","toFixed","alt","src","concat","Spinner","animation","App","_React$useState3","_React$useState4","component","search_input_component","initial_message_component","weather_result_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cc2b97c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\n// Functional component that returns my heading for the app\r\nconst Header = () => {\r\n  return (\r\n    <section>\r\n      <div className=\"content \">\r\n        <h2>Whether the Weather</h2>\r\n        <h2>Whether the Weather</h2>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n// Exports this file to be used in main App component\r\nexport default Header;\r\n","import React from 'react';\r\nimport './styles.css';\r\nfunction InitialMessage() {\r\n  return (\r\n    <div className=\"initial-message-container\">\r\n      get the weather in your city!\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InitialMessage;\r\n","import React from 'react';\r\nimport './styles.css';\r\nimport { InputGroup, Form, Button } from 'react-bootstrap';\r\n// Functional component that accesses JSON via the inputted city\r\nconst SearchInput = ({ setWeatherAttributes, setIsLoading }) => {\r\n  // Use react to set the state of the city\r\n  const [city, setCity] = React.useState('');\r\n  const getWeather = async () => {\r\n    setIsLoading(true);\r\n    const APIcall = await fetch(\r\n      'http://api.openweathermap.org/data/2.5/weather?q=' +\r\n        city +\r\n        '&units=metric' +\r\n        '&APPID=16a73ca4ce28ad2078b712e85c777b69'\r\n    );\r\n    const response = await APIcall.json();\r\n    // Checks if there is an error message for not being able to find the city\r\n    if (response.cod === '404') {\r\n      // Sets a state for the error\r\n      setWeatherAttributes({\r\n        error: \"Couldn't find that city!\",\r\n        cod: '404',\r\n      });\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    // Sets each attribute of weather to the specified object key in JSON file\r\n    const weatherResponse = {\r\n      temp: response.main.temp,\r\n      max: response.main.temp_max,\r\n      min: response.main.temp_min,\r\n      city: response.name,\r\n      lat: response.coord.lat,\r\n      lon: response.coord.lon,\r\n      windSpeed: response.wind.speed,\r\n      windDir: response.wind.deg,\r\n      country: response.sys.country,\r\n      humidity: response.main.humidity,\r\n      weather: response.weather[0].main,\r\n      description: response.weather[0].description,\r\n      icon: response.weather[0].icon,\r\n    };\r\n    setWeatherAttributes(weatherResponse);\r\n    setIsLoading(false);\r\n  };\r\n  return (\r\n    <form\r\n      onSubmit={(event) => {\r\n        event.preventDefault();\r\n        getWeather(city);\r\n      }}\r\n    >\r\n      <InputGroup className=\"form-container\">\r\n        {/* Sets the specified city as a value */}\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"city\"\r\n          onChange={(e) => {\r\n            if (e.target.value.length > 0) {\r\n              setCity(e.target.value);\r\n            }\r\n          }}\r\n          placeholder=\"Enter your city...\"\r\n        />\r\n        <Button type=\"submit\" variant=\"outline-secondary\">\r\n          Search\r\n        </Button>\r\n      </InputGroup>\r\n    </form>\r\n  );\r\n};\r\n// Exports this file to be used in main App component\r\nexport default SearchInput;\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport './styles.css';\r\n\r\nconst Weather = ({ weatherAttributes, isLoading }) => {\r\n  const {\r\n    city,\r\n    country,\r\n    description,\r\n    temp,\r\n    weather,\r\n    error,\r\n    icon,\r\n  } = weatherAttributes;\r\n  const isEmpty = Object.keys(weatherAttributes).length === 0;\r\n  return (\r\n    <>\r\n      {!isEmpty && !error && !isLoading && (\r\n        <div className=\"weather-tile-container\">\r\n          <h4>{city}</h4>\r\n          <p>{country}</p>\r\n          <p>{parseFloat(temp).toFixed(0)}Â°C</p>\r\n          <div className=\"icon-container\">\r\n            <img\r\n              alt=\"weather-icon\"\r\n              className=\"weather-icon-image\"\r\n              src={`http://openweathermap.org/img/w/${icon}.png`}\r\n            />\r\n            <h5>{weather}</h5>\r\n            <p>{description}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {isLoading && (\r\n        <div className=\"spinner-container\">\r\n          <Spinner animation=\"grow\" variant=\"danger\" />\r\n          <Spinner animation=\"grow\" variant=\"warning\" />\r\n          <Spinner animation=\"grow\" variant=\"success\" />\r\n          <Spinner animation=\"grow\" variant=\"info\" />\r\n        </div>\r\n      )}\r\n      {error && !isLoading && (\r\n        <div className=\"no-city-found\">\r\n          oops sorry, couldn't find that city{' '}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// Exports this file to be used in main App component\r\nexport default Weather;\r\n","import React from 'react';\r\nimport './App.css';\r\n// Import my different components from their files\r\nimport Tiles from './header';\r\nimport InitialMessage from './initial-message';\r\nimport SearchInput from './search-input';\r\nimport Weather from './weather-result';\r\n// Exports & returns class component to be rendered with it functionality\r\nconst App = () => {\r\n  const [weatherAttributes, setWeatherAttributes] = React.useState({});\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  // Function that fetches API for weather as a JSON file, taking the city as an arguement\r\n  const isEmpty = Object.keys(weatherAttributes).length === 0;\r\n  return (\r\n    <div className=\"site-container\">\r\n      <Tiles />\r\n      <SearchInput\r\n        setIsLoading={setIsLoading}\r\n        setWeatherAttributes={setWeatherAttributes}\r\n      />\r\n      {!isEmpty ? (\r\n        <Weather weatherAttributes={weatherAttributes} isLoading={isLoading} />\r\n      ) : (\r\n        <InitialMessage />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}